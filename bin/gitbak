#!/usr/bin/env ruby

require 'gitbak'
require 'optparse'

# --

usage = 'gitbak [<option(s)>]'

info  = <<-END.gsub(/^ {2}/, '')                                # {{{1
  Gitbak makes backups of GitHub/Bitbucket/Gist repositories.

  Example configuration:
    $ cat > ~/.gitbak
    dir = '/path/to/backup/dir'

    GitBak.auth       :github, 'user', 'pass'

    GitBak.bitbucket  "\#{dir}/bb", 'user', auth: true
    GitBak.github     "\#{dir}/gh", ..., method: :https
    GitBak.gist       ...
    ^D

  NB:
    * auth: pass is optional; gitbak prompts for user w/o pass.
    * bitbucket/github/gist: auth is optional; auth can be true for
      same user, or string for user name.
    * method is optional, :ssh by default.
    * To backup for multiple users, call bitbucket/github/gist
      multiple times.

  Tip: you can use e.g. the current date in the path(s).
END
                                                                # }}}1

# --

options = { cfgfile: "#{Dir.home}/.gitbak", verbose: false }

OptionParser.new do |opts|                                      # {{{1
  opts.banner = usage

  opts.on('-c', '--config-file FILE', 'Configuration file') do |f|
    options[:cfgfile] = f
  end

  opts.on('-v', '--[no-]verbose', 'Run verbosely') do |v|
    options[:verbose] = v
  end

  opts.on_tail('-h', '--help', 'Show this message') do
    puts opts, '', info
    exit
  end

  opts.on_tail('--version', 'Show version') do
    puts "gitbak v#{GitBak::VERSION}"
    exit
  end
end.parse!                                                      # }}}1

GitBak.die "usage: #{usage}" \
  unless ARGV.length == 0

# --

module GitBak                                                   # {{{1
  CONFIG__  = { bitbucket: [], github: [], gist: [], auth: {} }

  class << self
    def auth (service, user, pass = nil)
      (CONFIG__[:auth][service] ||= {})[user] = \
        { user: user, pass: pass }
    end

    %w{ bitbucket github gist }.map(&:to_sym).each do |name|
      define_method(name) do |dir, user, opts = {}|
        CONFIG__[name] << opts.merge(dir: dir, user: user)
      end
    end
  end
end                                                             # }}}1

# --

GitBak.die "Configuration file (#{options[:cfgfile]}) not found." \
  unless File.exists? options[:cfgfile]

load options[:cfgfile]

# --

%w{ Bitbucket GitHub Gist }.each do |name|                      # {{{1
  key = name.downcase.to_sym
  GitBak::CONFIG__[:auth].fetch(key, []).each do |k, v|
    v[:pass]  = GitBak.prompt "#{name} password for #{v[:user]}: ",
                  true \
      unless v[:pass]
  end
end                                                             # }}}1

# --

GitBak.main GitBak::CONFIG__.merge(options)

# vim: set tw=70 sw=2 sts=2 et fdm=marker :
